// <auto-generated />
using System;
using System.Collections.Generic;
using EEaseWebAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EEaseWebAPI.Persistence.Migrations
{
    [DbContext(typeof(EEaseAPIDbContext))]
    [Migration("20250120173228_AddRouteEntities")]
    partial class AddRouteEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppUserStandardRoute", b =>
                {
                    b.Property<Guid>("LikedRoutesId")
                        .HasColumnType("uuid");

                    b.Property<string>("LikedUsersId")
                        .HasColumnType("text");

                    b.HasKey("LikedRoutesId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("UserLikedRoutes", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.AllWorldCities.AllWorldCities", b =>
                {
                    b.Property<string>("admin_name")
                        .HasColumnType("text");

                    b.Property<string>("capital")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("city_ascii")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("iso2")
                        .HasColumnType("text");

                    b.Property<string>("iso3")
                        .HasColumnType("text");

                    b.Property<double?>("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("lng")
                        .HasColumnType("double precision");

                    b.Property<double?>("population")
                        .HasColumnType("double precision");

                    b.ToTable("AllWorldCities");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Currency.AllWordCurrencies", b =>
                {
                    b.Property<string>("AlphabeticCode")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BornDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DeleteCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdultsOnlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("AirbnbPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("AllInclusivePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ApartmentPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BedAndBreakfastPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BoutiqueHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CampingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CityCenterPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CoLivingSpacePreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EcoFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtendedStayPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FamilyFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlampingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GuestHousePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HistoricalBuildingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HomestayPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HostelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LuxuryHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("PetFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RemoteLocationPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ResortPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SpaAndWellnessPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VillaPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterfrontPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAccommodationPreferences");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AllergiesPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BitterPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BuffetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CafeteriaPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DairyFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("DeliveryPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FastFoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FinePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FoodTruckPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FusionPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlutenFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HalalPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("KosherPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalCuisinePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("NutFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganicPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SaltyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SeafoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SourPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SpicyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("StreetFoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SweetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("UmamiPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VeganPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("VegetarianPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserFoodPreferences");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFriendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("UserFriendships");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdventurePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BeachPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CanyonPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CavePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CoupleTravelPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CulturalPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("DesertPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FamilyTravelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ForestPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlacierPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupTravelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("IslandPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LakePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LuxuryPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("MountainPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("NaturePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RelaxationPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RiverPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RuralPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SoloTravelPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UrbanPreference")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ValleyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("VolcanoPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterfallPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPersonalizations");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("GoodForGroups")
                        .HasColumnType("boolean");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("GoogleMapsUri")
                        .HasColumnType("text");

                    b.Property<bool?>("LiveMusic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MenuForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("NationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("OutdoorSeating")
                        .HasColumnType("boolean");

                    b.Property<string>("PrimaryType")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<bool?>("Reservable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Restroom")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesBrunch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesVegetarianFood")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortFormattedAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WeatherId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebsiteUri")
                        .HasColumnType("text");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeatherId");

                    b.ToTable("BaseRestaurantPlaceEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("GoodForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("GoogleMapsUri")
                        .HasColumnType("text");

                    b.Property<string>("NationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryType")
                        .HasColumnType("text");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<bool?>("Restroom")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebsiteUri")
                        .HasColumnType("text");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BaseTravelPlaceEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Close", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<int?>("Hour")
                        .HasColumnType("integer");

                    b.Property<int?>("Minute")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId")
                        .IsUnique();

                    b.ToTable("Closes");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.DisplayName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseRestaurantPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseTravelPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LangugageCode")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseRestaurantPlaceEntityId")
                        .IsUnique();

                    b.HasIndex("BaseTravelPlaceEntityId")
                        .IsUnique();

                    b.ToTable("DisplayNames");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseRestaurantPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseTravelPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseRestaurantPlaceEntityId")
                        .IsUnique();

                    b.HasIndex("BaseTravelPlaceEntityId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Open", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<int?>("Hour")
                        .HasColumnType("integer");

                    b.Property<int?>("Minute")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId")
                        .IsUnique();

                    b.ToTable("Opens");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.PaymentOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcceptsCashOnly")
                        .HasColumnType("text");

                    b.Property<string>("AcceptsCreditCards")
                        .HasColumnType("text");

                    b.Property<string>("AcceptsDebitCards")
                        .HasColumnType("text");

                    b.Property<Guid?>("BaseRestaurantPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseTravelPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseRestaurantPlaceEntityId")
                        .IsUnique();

                    b.HasIndex("BaseTravelPlaceEntityId")
                        .IsUnique();

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RegularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RegularOpeningHoursId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Photos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseRestaurantPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseTravelPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HeightPx")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WidthPx")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BaseRestaurantPlaceEntityId");

                    b.HasIndex("BaseTravelPlaceEntityId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseRestaurantPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseTravelPlaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("OpenNow")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("WeekdayDescriptions")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("BaseRestaurantPlaceEntityId")
                        .IsUnique();

                    b.HasIndex("BaseTravelPlaceEntityId")
                        .IsUnique();

                    b.ToTable("RegularOpeningHours");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.StandardRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Days")
                        .HasColumnType("integer");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StandardRoutes");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.TravelDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DayDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("StandardRouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StandardRouteId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelDays");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Degree")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Warning")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Breakfast", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity");

                    b.Property<Guid?>("TravelDayId")
                        .HasColumnType("uuid");

                    b.HasIndex("TravelDayId")
                        .IsUnique();

                    b.ToTable("Breakfasts");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Dinner", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity");

                    b.Property<bool?>("ServesBeer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesWine")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TravelDayId")
                        .HasColumnType("uuid");

                    b.HasIndex("TravelDayId")
                        .IsUnique();

                    b.ToTable("Dinners");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Lunch", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity");

                    b.Property<bool?>("ServesBeer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesWine")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TravelDayId")
                        .HasColumnType("uuid");

                    b.HasIndex("TravelDayId")
                        .IsUnique();

                    b.ToTable("Lunches");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.PlaceAfterDinner", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity");

                    b.Property<bool?>("CurbsidePickup")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Delivery")
                        .HasColumnType("boolean");

                    b.Property<bool?>("GoodForChildren")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesBeer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesCocktails")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ServesWine")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Takeout")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TravelDayId")
                        .HasColumnType("uuid");

                    b.HasIndex("TravelDayId")
                        .IsUnique();

                    b.ToTable("PlacesAfterDinner");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Place", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity");

                    b.Property<Guid?>("FirstPlaceTravelDayId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondPlaceTravelDayId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ThirdPlaceTravelDayId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WeatherId")
                        .HasColumnType("uuid");

                    b.HasIndex("FirstPlaceTravelDayId")
                        .IsUnique();

                    b.HasIndex("SecondPlaceTravelDayId")
                        .IsUnique();

                    b.HasIndex("ThirdPlaceTravelDayId")
                        .IsUnique();

                    b.HasIndex("WeatherId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.TravelAccomodation", b =>
                {
                    b.HasBaseType("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity");

                    b.Property<string>("InternationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Star")
                        .HasColumnType("text");

                    b.Property<Guid?>("TravelDayId")
                        .HasColumnType("uuid");

                    b.HasIndex("TravelDayId")
                        .IsUnique();

                    b.ToTable("TravelAccomodations");
                });

            modelBuilder.Entity("AppUserStandardRoute", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.StandardRoute", null)
                        .WithMany()
                        .HasForeignKey("LikedRoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("AccommodationPreferences")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("FoodPreferences")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFriendship", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "Addressee")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("UserPersonalization")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.Weather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Close", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.Period", null)
                        .WithOne("Close")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Close", "PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.DisplayName", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne("DisplayName")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.DisplayName", "BaseRestaurantPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne("DisplayName")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.DisplayName", "BaseTravelPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Location", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne("Location")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Location", "BaseRestaurantPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne("Location")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Location", "BaseTravelPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Open", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.Period", null)
                        .WithOne("Open")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Open", "PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.PaymentOptions", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne("PaymentOptions")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.PaymentOptions", "BaseRestaurantPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne("PaymentOptions")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.PaymentOptions", "BaseTravelPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Period", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", null)
                        .WithMany("Periods")
                        .HasForeignKey("RegularOpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Photos", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithMany("Photos")
                        .HasForeignKey("BaseRestaurantPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithMany("Photos")
                        .HasForeignKey("BaseTravelPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne("RegularOpeningHours")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", "BaseRestaurantPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne("RegularOpeningHours")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", "BaseTravelPlaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.StandardRoute", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("MyRoutes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.TravelDay", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.StandardRoute", null)
                        .WithMany("TravelDays")
                        .HasForeignKey("StandardRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Breakfast", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Breakfast", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("Breakfast")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Breakfast", "TravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Dinner", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Dinner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("Dinner")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Dinner", "TravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Lunch", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Lunch", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("Lunch")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Lunch", "TravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.PlaceAfterDinner", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.PlaceAfterDinner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("PlaceAfterDinner")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.PlaceAfterDinner", "TravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Place", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("FirstPlace")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Place", "FirstPlaceTravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Place", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("SecondPlace")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Place", "SecondPlaceTravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("ThirdPlace")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.Place", "ThirdPlaceTravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.Weather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.TravelAccomodation", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", null)
                        .WithOne()
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.TravelAccomodation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Route.TravelDay", null)
                        .WithOne("Accomodation")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Route.TravelAccomodation", "TravelDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AccommodationPreferences");

                    b.Navigation("FoodPreferences");

                    b.Navigation("MyRoutes");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("UserPersonalization");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.BaseRestaurantPlaceEntity", b =>
                {
                    b.Navigation("DisplayName");

                    b.Navigation("Location");

                    b.Navigation("PaymentOptions");

                    b.Navigation("Photos");

                    b.Navigation("RegularOpeningHours");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.BaseTravelPlaceEntity", b =>
                {
                    b.Navigation("DisplayName");

                    b.Navigation("Location");

                    b.Navigation("PaymentOptions");

                    b.Navigation("Photos");

                    b.Navigation("RegularOpeningHours");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.Period", b =>
                {
                    b.Navigation("Close");

                    b.Navigation("Open");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.RegularOpeningHours", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.StandardRoute", b =>
                {
                    b.Navigation("TravelDays");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Route.TravelDay", b =>
                {
                    b.Navigation("Accomodation");

                    b.Navigation("Breakfast");

                    b.Navigation("Dinner");

                    b.Navigation("FirstPlace");

                    b.Navigation("Lunch");

                    b.Navigation("PlaceAfterDinner");

                    b.Navigation("SecondPlace");

                    b.Navigation("ThirdPlace");
                });
#pragma warning restore 612, 618
        }
    }
}

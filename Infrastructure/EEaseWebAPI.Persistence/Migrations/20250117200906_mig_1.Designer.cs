// <auto-generated />
using System;
using EEaseWebAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EEaseWebAPI.Persistence.Migrations
{
    [DbContext(typeof(EEaseAPIDbContext))]
    [Migration("20250117200906_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.AllWorldCities.AllWorldCities", b =>
                {
                    b.Property<string>("admin_name")
                        .HasColumnType("text");

                    b.Property<string>("capital")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("city_ascii")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("iso2")
                        .HasColumnType("text");

                    b.Property<string>("iso3")
                        .HasColumnType("text");

                    b.Property<double?>("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("lng")
                        .HasColumnType("double precision");

                    b.Property<double?>("population")
                        .HasColumnType("double precision");

                    b.ToTable("AllWorldCities");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Currency.AllWordCurrencies", b =>
                {
                    b.Property<string>("AlphabeticCode")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BornDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DeleteCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdultsOnlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("AirbnbPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("AllInclusivePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ApartmentPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BedAndBreakfastPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BoutiqueHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CampingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CityCenterPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CoLivingSpacePreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EcoFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtendedStayPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FamilyFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlampingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GuestHousePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HistoricalBuildingPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HomestayPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HostelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LuxuryHotelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("PetFriendlyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RemoteLocationPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ResortPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SpaAndWellnessPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VillaPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterfrontPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAccommodationPreferences");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AllergiesPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BitterPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BuffetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CafeteriaPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DairyFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("DeliveryPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FastFoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FinePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FoodTruckPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FusionPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlutenFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("HalalPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("KosherPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalCuisinePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("NutFreePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganicPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SaltyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SeafoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SourPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SpicyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("StreetFoodPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SweetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("UmamiPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VeganPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("VegetarianPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserFoodPreferences");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdventurePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BeachPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CanyonPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CavePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("CoupleTravelPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CulturalPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("DesertPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("FamilyTravelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("ForestPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GlacierPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupTravelPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("IslandPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LakePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("LuxuryPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("MountainPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("NaturePreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RelaxationPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RiverPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("RuralPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("SoloTravelPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UrbanPreference")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ValleyPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("VolcanoPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterfallPreference")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPersonalizations");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.StandardRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StandardRoutes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("AccommodationPreferences")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserAccommodationPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("FoodPreferences")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserFoodPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", "User")
                        .WithOne("UserPersonalization")
                        .HasForeignKey("EEaseWebAPI.Domain.Entities.Identity.UserPersonalization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EEaseWebAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EEaseWebAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("AccommodationPreferences");

                    b.Navigation("FoodPreferences");

                    b.Navigation("UserPersonalization");
                });
#pragma warning restore 612, 618
        }
    }
}
